#include <bits/stdc++.h>
using namespace std;
#define INF 2147483647
#define INFF 9223372036854775807
#define ll long long
#define REP(i,n) for(int i=0;i<n;i++)
#define REPP(i,m,n) for(int i=m;i<n;i++)
#define ALL(N) (N.begin(),N.end())
#define de cout << "debug" << endl;
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }

int H,W;
char C[500][500];
int flag[500][500];
int X,Y;
int ans = 0;

void dfs( int x, int y){
    flag[x][y] = 1;  //一度通過した判定となり通行不可とする
    if(C[x][y] == 'g'){  //ゴールなったら返す
        ans = 1;
        return;
    }
    
    //再帰的に探索する
    
    if(x != 0 && flag[x-1][y] == 0){  //ｘの座標からはみ出さない　且つ　通行可能
        dfs(x-1,y);
    }
    if(x != H-1 && flag[x+1][y] == 0){
        dfs(x+1,y);
    }
    if(y != 0 && flag[x][y-1] == 0){
        dfs(x,y-1);
    }
    if(y != W-1 && flag[x][y+1] == 0){
        dfs(x,y+1);
    }
    flag[x][y] = 2;  //どれにも該当しなかったとき行き止まりの判定となる
    return;
}

int main() {
    cin.tie(0);
	ios::sync_with_stdio(false);

    cin >> H >> W;
    REP(i,H){
        REP(j,W){
            cin >> C[i][j];
            if(C[i][j] != '#'){  //０ならば通行可
                flag[i][j] = 0;
            }
            else{
                flag[i][j] = 2;  //２は通行不可
            }

            if(C[i][j] == 's'){  //sに開始地点を合わせる
                X = i; Y = j;
            }
        }
    }

    dfs(X,Y);

    if(ans == 1){
        cout << "Yes" << endl;
    }
    else {
        cout << "No" << endl;
    }
}
